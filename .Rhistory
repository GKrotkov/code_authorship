ns_env("stats")
help("parseNamespaceFile")
getNamespaceInfo("stats")
ns <- asNamespace("stats")
lsNamespaceInfo <- function(ns, ...) {
ns <- asNamespace(ns, base.OK = FALSE)
ls(..., envir = get(".__NAMESPACE__.", envir = ns, inherits = FALSE))
}
allinfoNS <- function(ns) sapply(lsNamespaceInfo(ns), getNamespaceInfo, ns=ns)
allinfoNS("stats")
lsNamespaceInfo <- function(ns, ...) {
ns <- asNamespace(ns, base.OK = FALSE)
ls(..., envir = get(".__NAMESPACE__.", envir = ns, inherits = FALSE))
}
get_namespace <- function(ns) sapply(lsNamespaceInfo(ns),
getNamespaceInfo, ns=ns)
get_namespace("stats")
names(get_namespace("stats"))
lsNamespaceInfo <- function(ns, ...) {
ns <- asNamespace(ns, base.OK = FALSE)
ls(..., envir = get(".__NAMESPACE__.", envir = ns, inherits = FALSE))
}
get_namespace <- function(ns) sapply(lsNamespaceInfo(ns)$S3methods,
getNamespaceInfo, ns=ns)
get_namespace("stats")
get_namespace <- function(ns) {
return(sapply(lsNamespaceInfo(ns), getNamespaceInfo, ns=ns))
}
get_namespace("stats")
get_namespace("utils")
library(ggplot)
library(ggplot2)
library(tidyverse)
get_namespace("tidyverse")
get_namespace("dplyr")
get_namespace("dplyr")$S3Methods
pkgs
pkgs <- c("utils", "stats", "ggplot2", "dplyr", "tibble", "readr")
list(pkgs)
help(list)
get_namespace("utils")
namespace <- get_namespace("stats")
namespace
namespace$S3methods
::stats
::stats
stats::
pkg_namespace <- asNamespace("stats")
# List all the exported functions
exported_functions <- ls(name = pkg_namespace, all.names = TRUE)
exported_functions
get_namespace <- function(ns){
return(ls(name = asNamespace(ns), all.names = TRUE))
}
get_namespace("stats")
get_namespace("utils")
get_namespace("tibble")
get_namespace("readr")
get_namespace(pkgs)
pkgs
pkgs <- c("utils", "stats", "ggplot2", "dplyr", "tibble", "readr")
namespaces <- c()
get_namespace <- function(ns){
return(ls(name = asNamespace(ns), all.names = TRUE))
}
for (i in 1:length(pkgs)){
namespaces <- c(namespaces, get_namespace(pkgs[i]))
}
namespaces
library(tidyverse)
library(roxygen2)
pkgs <- c("utils", "stats", "ggplot2", "dplyr", "tibble", "readr", "roxygen2")
namespaces <- c()
get_namespace <- function(ns){
return(ls(name = asNamespace(ns), all.names = TRUE))
}
for (i in 1:length(pkgs)){
namespaces <- c(namespaces, get_namespace(pkgs[i]))
}
namespaces
tail(namespaces)
roxygen2::yaml_path
help(yaml_path)
help(writeLines)
save(namespaces, file = "r_namespaces.rda")
"dbinom" %in% namespaces
get_namespace("base")
library(tidyverse)
library(roxygen2)
pkgs <- c("base", "utils", "stats", "ggplot2", "dplyr", "tibble", "readr",
"roxygen2")
namespaces <- c()
get_namespace <- function(ns){
return(ls(name = asNamespace(ns), all.names = TRUE))
}
for (i in 1:length(pkgs)){
namespaces <- c(namespaces, get_namespace(pkgs[i]))
}
save(namespaces, file = "r_namespaces.rda")
length(namespaces)
library(tidyverse)
library(roxygen2)
library(devtools)
pkgs <- c("base", "utils", "stats", "ggplot2", "dplyr", "tibble", "readr",
"roxygen2", "devtools")
namespaces <- c()
get_namespace <- function(ns){
return(ls(name = asNamespace(ns), all.names = TRUE))
}
for (i in 1:length(pkgs)){
namespaces <- c(namespaces, get_namespace(pkgs[i]))
}
save(namespaces, file = "r_namespaces.rda")
# extract_code.r
# goal: purl() out r code from student submissions, save it in a file with a
# coded name (unique and consistent, but not the andrewID input)
library(knitr)
# id_gen from Alex Reinhart
id_gen <- function(n = 1) {
a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, n, TRUE)), sample(LETTERS, n, TRUE))
}
# Change these inputs!
input_dir <- "data/code_authorship/inputs/gkrotkov"
output_dir <- "data/code_authorship/outputs"
filenames <- list.files(input_dir)
filepaths <- paste(input_dir, filenames, sep = "/")
purl_filepaths_to_R <- function(filepaths, output_dir, subfolder = ""){
target_path <- paste(output_dir, subfolder, sep = "/")
target_paths <- paste0(target_path, "/file", 1:length(filepaths), ".R")
for (i in 1:length(filepaths)){
knitr::purl(filepaths[i],
target_paths[i])
}
}
filepaths
output_dir
input_dir <- "data/code_authorship/inputs/nphillip"
output_dir <- "data/code_authorship/outputs"
filepaths
subfolder = "student_1"
target_path <- paste(output_dir, subfolder, sep = "/")
target_paths <- paste0(target_path, "/file", 1:length(filepaths), ".R")
target_path
target_paths
filepaths
filenames
input_dir <- "data/code_authorship/inputs/nphillip"
output_dir <- "data/code_authorship/outputs"
filenames <- list.files(input_dir)
filepaths <- paste(input_dir, filenames, sep = "/")
filenames
input_dir
getwd()
input_dir <- "../data/code_authorship/inputs/nphillip"
output_dir <- "../data/code_authorship/outputs"
filenames <- list.files(input_dir)
filepaths <- paste(input_dir, filenames, sep = "/")
filenames
getwd()
setwd("..")
getwd()
input_dir <- "data/code_authorship/inputs/nphillip"
output_dir <- "data/code_authorship/outputs"
filenames <- list.files(input_dir)
filepaths <- paste(input_dir, filenames, sep = "/")
filenames
input_dir
getwd()
input_dir <- "data/inputs/nphillip"
output_dir <- "data/outputs"
filenames <- list.files(input_dir)
filenames
filepaths <- paste(input_dir, filenames, sep = "/")
filepaths
target_path <- paste(output_dir, subfolder, sep = "/")
target_path
target_paths <- paste0(target_path, "/file", 1:length(filepaths), ".R")
target_paths
filepaths
knitr::purl(filepaths, target_paths)
filepaths
help(mapply)
mapply(knitr::purl, filepaths, target_paths)
source("purler.R")
getwd()
source("R/purler.R")
filenames
filenames
library(devtools)
load_all()
help(load_all)
# purler.R
# goal: purl() out r code from student submissions, save it in a file with a
# coded name (unique and consistent, but not the andrewID input)
library(knitr)
# Generate random noise for output names
id_gen <- function(n = 1) {
return(paste0(
do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE)),
sprintf("%04d", sample(1000:9999, n, TRUE)),
sample(LETTERS, n, TRUE)))
}
purl_filepaths_to_R <- function(filepaths, output_dir, subfolder = ""){
target_path <- paste(output_dir, subfolder, sep = "/")
target_paths <- paste0(target_path, "/file", 1:length(filepaths), ".R")
mapply(knitr::purl, filepaths, target_paths)
}
purl_dir_to_R <- function(input_dir, output_dir, subfolder = ""){
filenames <- list.files(input_dir, pattern = "*.Rmd$")
filepaths <- paste(input_dir, filenames, sep = "/")
purl_filepaths_to_R(filepaths, output_dir, subfolder)
}
purl_dir_to_R("data/inputs/nphillip", "data/output", "student_2")
getwd()
list.files("data/inputs")
list.files("data/inputs/nphillip")
purl_dir_to_R("data/inputs/nphillip", "data/tst")
filenames <- list.files("data/inputs/nphillip")
filenames
filenames <- list.files("data/inputs/nphillip", pattern = "*.Rmd$")
filenames
target_path <- paste("data/tst", "", sep = "/")
target_path
output_dir
output_dir <- "data/outputs/tst"
filepaths
target_paths <- paste0(output_dir, "/file", 1:length(filepaths), ".R")
target_paths
# purler.R
# goal: purl() out r code from student submissions, save it in a file with a
# coded name (unique and consistent, but not the andrewID input)
library(knitr)
# Generate random noise for output names
id_gen <- function(n = 1) {
return(paste0(
do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE)),
sprintf("%04d", sample(1000:9999, n, TRUE)),
sample(LETTERS, n, TRUE)))
}
purl_filepaths_to_R <- function(filepaths, output_dir){
target_paths <- paste0(output_dir, "/file", 1:length(filepaths), ".R")
mapply(knitr::purl, filepaths, target_paths)
}
purl_dir_to_R <- function(input_dir, output_dir){
filenames <- list.files(input_dir, pattern = "*.Rmd$")
filepaths <- paste(input_dir, filenames, sep = "/")
purl_filepaths_to_R(filepaths, output_dir)
}
help(prul)
help(purl)
# purler.R
# goal: purl() out r code from student submissions, save it in a file with a
# coded name (unique and consistent, but not the andrewID input)
library(knitr)
# Generate random noise for output names
id_gen <- function(n = 1) {
return(paste0(
do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE)),
sprintf("%04d", sample(1000:9999, n, TRUE)),
sample(LETTERS, n, TRUE)))
}
purl_filepaths <- function(filepaths, output_dir){
target_paths <- paste0(output_dir, "/file", 1:length(filepaths), ".R")
mapply(knitr::purl, filepaths, target_paths)
}
purl_dir <- function(input_dir, output_dir){
filenames <- list.files(input_dir, pattern = "*.Rmd$")
filepaths <- paste(input_dir, filenames, sep = "/")
purl_filepaths(filepaths, output_dir)
}
rm(list = ls())
# purler.R
# goal: purl() out r code from student submissions, save it in a file with a
# coded name (unique and consistent, but not the andrewID input)
library(knitr)
# Generate random noise for output names
id_gen <- function(n = 1) {
return(paste0(
do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE)),
sprintf("%04d", sample(1000:9999, n, TRUE)),
sample(LETTERS, n, TRUE)))
}
purl_filepaths <- function(filepaths, output_dir){
target_paths <- paste0(output_dir, "/file", 1:length(filepaths), ".R")
mapply(knitr::purl, filepaths, target_paths)
}
purl_dir <- function(input_dir, output_dir){
filenames <- list.files(input_dir, pattern = "*.Rmd$")
filepaths <- paste(input_dir, filenames, sep = "/")
purl_filepaths(filepaths, output_dir)
}
purl_dir
purl_dir("inputs/nphillip", "outputs/tst")
purl_dir("data/inputs/nphillip", "data/outputs/tst")
getwd()
load_all()
load_all()
load_all()
help(load_all)
load_all()
get_namespaces()
tofile
load_all()
tofile
get_namespaces()
getwd()
list.dirs("data/authors")
help(list.dirs)
tmp <- list(one = c(1, 2, 3), two = c(4, 5, 6))
c(tmp)
unlist(tmp)
rm(tmop)
rm(tmp)
list.dirs("data/authors")
data_path <- "data"
authors <- list.dirs(paste(data_path, "authors", sep = "/"))
authors
list.dirs("data/authors/")
list.dirs("data/authors")
help(list.dirs)
data_path <- "data"
authors <- c("group_1", "group_2", "group_3", "group_4",
"individual_1", "individual_2", "individual_3", "individual_4")
author_id <- rep(authors, each = 10)
author_paths <- paste(data_path, "authors", authors, sep = "/")
filenames <- c(mapply(list.files, author_paths))
filenames
mapply(list.files, author_paths)
author_paths
list.dirs("data/authors", recursive = FALSE)
data_path <- "data"
author_paths <- list.dirs(paste(data_path, "authors"), recursive = FALSE)
filenames <- c(mapply(list.files, author_paths))
strsplit(author_paths, "/")
help(strsplit)
strsplit(author_paths, "/")
author_paths
author_paths <- list.dirs(paste(data_path, "authors"), recursive = FALSE)
filenames <- c(mapply(list.files, author_paths))
filenames
filenames
author_paths
author_paths <- list.dirs(paste(data_path, "authors", sep = "/"),
recursive = FALSE)
author_paths
filenames <- c(mapply(list.files, author_paths))
filenames
strsplit(author_paths)
strsplit(author_paths, "/")
sapply(strsplit(author_paths), function(lst) {return(lst[[len(lst)]])})
sapply(strsplit(author_paths, "/"), function(lst) {return(lst[[len(lst)]])})
sapply(strsplit(author_paths, "/"), function(lst) {return(lst[[length(lst)]])})
sapply(strsplit(author_paths, "/"), tail, n = 1)
data_path <- "data"
author_paths <- list.dirs(paste(data_path, "authors", sep = "/"),
recursive = FALSE)
filenames <- c(mapply(list.files, author_paths))
# ASSUMPTION: there are exactly 10 R files in each directory
authors <- sapply(strsplit(author_paths, "/"), tail, n = 1)
author_id <- rep(authors, each = 10)
author_id
filenames
names(filenames) <- author_id
filepaths <- paste(rep(author_paths, each = 10), filenames, sep = "/")
names(filepaths) <- author_id
text <- mapply(reformat_text_R, filepaths, MoreArgs = list(replacements))
text
document_id <- paste("text", 1:length(text), sep = "")
withhold_idx <- c(sample(which(author_id == "group_1"), test_size),
sample(which(author_id == "group_2"), test_size),
sample(which(author_id == "group_3"), test_size),
sample(which(author_id == "group_4"), test_size),
sample(which(author_id == "individual_1"), test_size),
sample(which(author_id == "individual_2"), test_size),
sample(which(author_id == "individual_3"), test_size),
sample(which(author_id == "individual_4"), test_size))
